<?php

use Herrera\Go\Go;
use Symfony\Component\Console\Input\InputInterface as In;
use Symfony\Component\Console\Output\OutputInterface as Out;

/**
 * Runs the following tasks:
 *
 * - clear:cache
 * - clear:logs
 */
task(
    'clear:all',
    'Clears all temporary files...',
    function () {
        $status = 0;
        $status += run('clear:cache');
        $status += run('clear:logs');

        return $status ? 1 : 0;
    }
);

/**
 * Removes the contents of the cache directory.
 */
task(
    'clear:cache',
    'Clears the cache directory.',
    function (Out $out) {
        $out->writeln('Clearing the cache...');

        purge(__DIR__ . '/app/cache', false);
    }
);

/**
 * Removes the contents of the logs directory.
 */
task(
    'clear:logs',
    'Clears the log directory.',
    function (Out $out) {
        $out->writeln('Clearing the logs...');

        purge(__DIR__ . '/app/logs', false);
    }
);

/**
 * Generates the API documentation.
 */
task(
    'generate:docs',
    'Generates API documentation using Sami.',
    function (Out $out) {
        $out->writeln('Generating API documentation...');

        return cmd(
            __DIR__ . '/bin/sami.php',
            array(
                'update',
                __DIR__ . '/app/config/docs.php'
            )
        );
    }
);

/**
 * Runs the internal PHP web server.
 *
 * Offers the ability to define the application debugging mode and environment
 * name, the output log path, and enable xdebug for profiling and other tasks.
 */
task(
    'server:run',
    'Runs the application using the internal PHP web server.',
    function (In $in, Out $out) {
        $args = array(
            '-S', $in->getOption('host') . ':' . $in->getOption('port'),
            '-t', __DIR__ . '/web',
        );

        if ($in->getOption('test')) {
            $in->setOption('debug', true);
            $in->setOption('mode', 'dev');
        }

        $options = array(
            'env' => array(
                'APP_DEBUG=' . ($in->getOption('debug') ? 1 : 0),
                'APP_MODE=' . $in->getOption('mode'),
            ),
        );

        $out->write('<fg=magenta>Running</fg=magenta> on ');
        $out->write("<fg=cyan>{$args[1]}</fg=cyan> ");

        $out->write(
            sprintf(
                '(<fg=yellow>debug:</fg=yellow> <fg=%s>%s</fg=%1$s>',
                $in->getOption('debug') ? 'green' : 'red',
                $in->getOption('debug') ? 'on' : 'off'
            )
        );

        $out->writeln(
            sprintf(
                ', <fg=yellow>mode:</fg=yellow> <fg=%s>%s</fg=%1$s>)...',
                ('prod' == $in->getOption('mode')) ? 'red' : 'green',
                $in->getOption('mode')
            )
        );

        if (null !== ($log = $in->getOption('log'))) {
            $out->writeln(
                sprintf(
                    '<fg=magenta>Logging</fg=magenta> to <fg=cyan>%s</fg=cyan>',
                    $log
                )
            );

            $args[] = '>';
            $args[] = '/dev/null';
            $args[] = '2>';
            $args[] = $log;
        }

        if (empty($log)) {
            $out->writeln('');
            $out->writeln('<fg=cyan>==========</fg=cyan>');
            $out->writeln('');
        }

        cmd('php', $args, $options);
    }
);

option('debug', 'd', OPT_NO_VALUE, 'Enable debugging?');
option('host', null, OPT_IS_REQUIRED, 'The server host name.', 'localhost');
option('log', 'l', OPT_IS_REQUIRED, 'The log file.');
option('mode', 'm', OPT_IS_REQUIRED, 'The application mode.', 'prod');
option('port', 'p', OPT_IS_REQUIRED, 'The server port number.', 8000);
option('test', 't', OPT_NO_VALUE, 'Enable debugging in "dev" mode.');

/**
 * Executes a command (`passthru()`) and returns its exit status.
 *
 * @param string $command   The command name.
 * @param array  $arguments The command arguments.
 * @param array  $options   The command options.
 *
 * @return integer The status code.
 */
function cmd($command, array $arguments = array(), array $options = array())
{
    $string = '';

    if (!empty($options['env'])) {
        $string .= join(' ', $options['env']) . ' ';
    }

    $string .= $command;

    if ($arguments) {
        array_walk(
            $arguments,
            function (&$argument) {

                if (!preg_match('/^\s*\d{0,1}[\|><]/', $argument)) {
                    $argument = escapeshellarg($argument);
                }
            }
        );

        $string .= ' ' . join(' ', $arguments);
    }

    passthru($string, $status);

    return $status;
}

/**
 * Purges a file or directory.
 *
 * @param string  $path The path to purge.
 * @param boolean $root If directory, delete root folder?
 * @param array   $keep Keep these files.
 */
function purge($path, $root = true, array $keep = array('.gitignore'))
{
    if (is_dir($path)) {
        foreach (scandir($path) as $item) {
            if (('.' == $item) || ('..' == $item)) {
                continue;
            }

            if (in_array($item, $keep)) {
                continue;
            }

            purge($path . DIRECTORY_SEPARATOR . $item);
        }

        if ($root) {
            rmdir($path);
        }
    } else {
        unlink($path);
    }
}
